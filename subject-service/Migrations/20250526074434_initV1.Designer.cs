// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using subject_service.DbMigrator;

#nullable disable

namespace subject_service.Migrations
{
    [DbContext(typeof(SubjectServiceDbContext))]
    [Migration("20250526074434_initV1")]
    partial class initV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("subject_service.Models.ComponentPoint", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<int>("columnOrder")
                        .HasColumnType("integer")
                        .HasColumnName("column_order");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("isPassFailType")
                        .HasColumnType("boolean")
                        .HasColumnName("is_pass_fail_type");

                    b.Property<long>("markSubjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("mark_subject_id");

                    b.Property<long>("markTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("mark_type_id");

                    b.Property<string>("qualitativeScore")
                        .HasColumnType("text")
                        .HasColumnName("qualitative_score");

                    b.Property<decimal?>("score")
                        .HasColumnType("numeric")
                        .HasColumnName("score");

                    b.HasKey("id");

                    b.HasIndex("markSubjectId");

                    b.HasIndex("markTypeId");

                    b.ToTable("component_points");
                });

            modelBuilder.Entity("subject_service.Models.Mark", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("academicPerformance")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("academic_performance");

                    b.Property<long>("classId")
                        .HasColumnType("bigint")
                        .HasColumnName("class_id");

                    b.Property<string>("conduct")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("conduct");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("schoolYearId")
                        .HasColumnType("bigint")
                        .HasColumnName("school_year_id");

                    b.Property<decimal?>("scoreAverage")
                        .HasColumnType("numeric")
                        .HasColumnName("score_average");

                    b.Property<long>("semesterId")
                        .HasColumnType("bigint")
                        .HasColumnName("semester_id");

                    b.Property<string>("studentId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("student_id");

                    b.Property<decimal>("weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.HasKey("id");

                    b.ToTable("marks");
                });

            modelBuilder.Entity("subject_service.Models.MarkSubject", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("markId")
                        .HasColumnType("bigint")
                        .HasColumnName("mark_id");

                    b.Property<decimal?>("scoreAverage")
                        .HasColumnType("numeric")
                        .HasColumnName("score_average");

                    b.Property<long>("subjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("subject_id");

                    b.HasKey("id");

                    b.HasIndex("markId");

                    b.HasIndex("subjectId");

                    b.ToTable("mark_subject");
                });

            modelBuilder.Entity("subject_service.Models.MarkType", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long>("classId")
                        .HasColumnType("bigint")
                        .HasColumnName("class_id");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<long>("subjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("subject_id");

                    b.Property<int>("totalColumn")
                        .HasColumnType("integer")
                        .HasColumnName("total_column");

                    b.Property<decimal>("weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.HasKey("id");

                    b.HasIndex("subjectId");

                    b.ToTable("mark_types");
                });

            modelBuilder.Entity("subject_service.Models.StudentSubjectScore", b =>
                {
                    b.Property<string>("academic_performance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("class_id")
                        .HasColumnType("bigint");

                    b.Property<long>("id")
                        .HasColumnType("bigint");

                    b.Property<long>("mark_id")
                        .HasColumnType("bigint");

                    b.Property<float>("score_average")
                        .HasColumnType("real");

                    b.Property<long>("semester_id")
                        .HasColumnType("bigint");

                    b.Property<string>("student_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("subject_id")
                        .HasColumnType("bigint");

                    b.Property<string>("subject_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("view_student_subject_scores", (string)null);
                });

            modelBuilder.Entity("subject_service.Models.Subject", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("isEvaluateWithScore")
                        .HasColumnType("boolean")
                        .HasColumnName("is_evaluate_with_score");

                    b.Property<bool>("isScoreable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_scoreable");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<long>("schoolYearId")
                        .HasColumnType("bigint")
                        .HasColumnName("school_year_id");

                    b.HasKey("id");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("subject_service.Models.SubjectClass", b =>
                {
                    b.Property<long>("subjectId")
                        .HasMaxLength(255)
                        .HasColumnType("bigint")
                        .HasColumnName("subject-id");

                    b.Property<long>("classId")
                        .HasColumnType("bigint")
                        .HasColumnName("class-id");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("isMainSubject")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main_subject");

                    b.Property<int>("maxSlotsPerSession")
                        .HasColumnType("integer")
                        .HasColumnName("max_slots_per_session");

                    b.Property<bool>("preferConsecutive")
                        .HasColumnType("boolean")
                        .HasColumnName("prefer_consecutive");

                    b.Property<long?>("specialRoom")
                        .HasColumnType("bigint")
                        .HasColumnName("special_room");

                    b.Property<int?>("specialSlot")
                        .HasColumnType("integer")
                        .HasColumnName("special_slot");

                    b.Property<int>("weeklySlots")
                        .HasColumnType("integer")
                        .HasColumnName("weekly_slots");

                    b.HasKey("subjectId", "classId");

                    b.ToTable("subject_classes");
                });

            modelBuilder.Entity("subject_service.Models.TeacherSubjectClass", b =>
                {
                    b.Property<string>("teacherId")
                        .HasColumnType("text")
                        .HasColumnName("teacher_id");

                    b.Property<long>("subjectId")
                        .HasMaxLength(255)
                        .HasColumnType("bigint")
                        .HasColumnName("subject_id");

                    b.Property<long>("classId")
                        .HasColumnType("bigint")
                        .HasColumnName("class_id");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("teacherId", "subjectId", "classId");

                    b.HasIndex("subjectId");

                    b.ToTable("teacher_subject_classes");
                });

            modelBuilder.Entity("subject_service.Models.ComponentPoint", b =>
                {
                    b.HasOne("subject_service.Models.MarkSubject", "MarkSubject")
                        .WithMany("ComponentPoints")
                        .HasForeignKey("markSubjectId")
                        .IsRequired();

                    b.HasOne("subject_service.Models.MarkType", "MarkType")
                        .WithMany("ComponentPoints")
                        .HasForeignKey("markTypeId")
                        .IsRequired();

                    b.Navigation("MarkSubject");

                    b.Navigation("MarkType");
                });

            modelBuilder.Entity("subject_service.Models.MarkSubject", b =>
                {
                    b.HasOne("subject_service.Models.Mark", "Mark")
                        .WithMany("SubjectMarks")
                        .HasForeignKey("markId")
                        .IsRequired();

                    b.HasOne("subject_service.Models.Subject", "Subject")
                        .WithMany("SubjectMarks")
                        .HasForeignKey("subjectId")
                        .IsRequired();

                    b.Navigation("Mark");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("subject_service.Models.MarkType", b =>
                {
                    b.HasOne("subject_service.Models.Subject", "Subject")
                        .WithMany("MarkTypes")
                        .HasForeignKey("subjectId")
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("subject_service.Models.SubjectClass", b =>
                {
                    b.HasOne("subject_service.Models.Subject", "Subject")
                        .WithMany("SubjectClasses")
                        .HasForeignKey("subjectId")
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("subject_service.Models.TeacherSubjectClass", b =>
                {
                    b.HasOne("subject_service.Models.Subject", "Subject")
                        .WithMany("TeacherSubjectClasses")
                        .HasForeignKey("subjectId")
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("subject_service.Models.Mark", b =>
                {
                    b.Navigation("SubjectMarks");
                });

            modelBuilder.Entity("subject_service.Models.MarkSubject", b =>
                {
                    b.Navigation("ComponentPoints");
                });

            modelBuilder.Entity("subject_service.Models.MarkType", b =>
                {
                    b.Navigation("ComponentPoints");
                });

            modelBuilder.Entity("subject_service.Models.Subject", b =>
                {
                    b.Navigation("MarkTypes");

                    b.Navigation("SubjectClasses");

                    b.Navigation("SubjectMarks");

                    b.Navigation("TeacherSubjectClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
