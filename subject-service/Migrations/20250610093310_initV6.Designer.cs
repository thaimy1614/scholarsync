// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using subject_service.DbMigrator;

#nullable disable

namespace subject_service.Migrations
{
    [DbContext(typeof(SubjectServiceDbContext))]
    [Migration("20250610093310_initV6")]
    partial class initV6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("subject_service.Models.ComponentPoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ColumnOrder")
                        .HasColumnType("integer")
                        .HasColumnName("column_order");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPassFailType")
                        .HasColumnType("boolean")
                        .HasColumnName("is_pass_fail_type");

                    b.Property<long>("MarkSubjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("mark_subject_id");

                    b.Property<long>("MarkTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("mark_type_id");

                    b.Property<string>("QualitativeScore")
                        .HasColumnType("text")
                        .HasColumnName("qualitative_score");

                    b.Property<decimal?>("Score")
                        .HasColumnType("numeric")
                        .HasColumnName("score");

                    b.HasKey("Id");

                    b.HasIndex("MarkSubjectId");

                    b.HasIndex("MarkTypeId");

                    b.ToTable("component_points");
                });

            modelBuilder.Entity("subject_service.Models.Mark", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AcademicPerformance")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("academic_performance");

                    b.Property<string>("AwardTitle")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("award_title");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint")
                        .HasColumnName("class_id");

                    b.Property<string>("Conduct")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("conduct");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool?>("IsPassed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_passed");

                    b.Property<long>("SchoolYearId")
                        .HasColumnType("bigint")
                        .HasColumnName("school_year_id");

                    b.Property<long?>("SemesterId")
                        .HasColumnType("bigint")
                        .HasColumnName("semester_id");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("student_id");

                    b.Property<int>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.ToTable("marks");
                });

            modelBuilder.Entity("subject_service.Models.MarkSubject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("MarkId")
                        .HasColumnType("bigint")
                        .HasColumnName("mark_id");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("note");

                    b.Property<string>("QualitativeScoreAverage")
                        .HasColumnType("text")
                        .HasColumnName("qualitative_score_average");

                    b.Property<decimal?>("ScoreAverage")
                        .HasColumnType("numeric")
                        .HasColumnName("score_average");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("subject_id");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("SubjectId");

                    b.ToTable("mark_subject");
                });

            modelBuilder.Entity("subject_service.Models.MarkType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint")
                        .HasColumnName("class_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("subject_id");

                    b.Property<int>("TotalColumn")
                        .HasColumnType("integer")
                        .HasColumnName("total_column");

                    b.Property<int>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("mark_types");
                });

            modelBuilder.Entity("subject_service.Models.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsEvaluateWithScore")
                        .HasColumnType("boolean")
                        .HasColumnName("is_evaluate_with_score");

                    b.Property<bool>("IsMainSubject")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main_subject");

                    b.Property<bool>("IsScoreable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_scoreable");

                    b.Property<int>("MaxSlotsPerSession")
                        .HasColumnType("integer")
                        .HasColumnName("max_slots_per_session");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<bool>("PreferConsecutive")
                        .HasColumnType("boolean")
                        .HasColumnName("prefer_consecutive");

                    b.Property<long>("SchoolYearId")
                        .HasColumnType("bigint")
                        .HasColumnName("school_year_id");

                    b.Property<long?>("SpecialRoom")
                        .HasColumnType("bigint")
                        .HasColumnName("special_room");

                    b.Property<int?>("SpecialSlot")
                        .HasColumnType("integer")
                        .HasColumnName("special_slot");

                    b.Property<int>("WeeklySlots")
                        .HasColumnType("integer")
                        .HasColumnName("weekly_slots");

                    b.HasKey("Id");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("subject_service.Models.SubjectClass", b =>
                {
                    b.Property<long>("SubjectId")
                        .HasMaxLength(255)
                        .HasColumnType("bigint")
                        .HasColumnName("subject-id");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint")
                        .HasColumnName("class-id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("SubjectId", "ClassId");

                    b.ToTable("subject_classes");
                });

            modelBuilder.Entity("subject_service.Models.TeacherSubjectClass", b =>
                {
                    b.Property<string>("TeacherId")
                        .HasColumnType("text")
                        .HasColumnName("teacher_id");

                    b.Property<long>("SubjectId")
                        .HasMaxLength(255)
                        .HasColumnType("bigint")
                        .HasColumnName("subject_id");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint")
                        .HasColumnName("class_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("TeacherId", "SubjectId", "ClassId");

                    b.HasIndex("SubjectId");

                    b.ToTable("teacher_subject_classes");
                });

            modelBuilder.Entity("subject_service.Models.ViewStudentSubjectScore", b =>
                {
                    b.Property<string>("AcademicPerformance")
                        .HasColumnType("text")
                        .HasColumnName("academic_performance");

                    b.Property<string>("AwardTitle")
                        .HasColumnType("text")
                        .HasColumnName("award_title");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint")
                        .HasColumnName("class_id");

                    b.Property<int>("ColumnOrder")
                        .HasColumnType("integer")
                        .HasColumnName("column_order");

                    b.Property<string>("ComponentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("component_type");

                    b.Property<string>("Conduct")
                        .HasColumnType("text")
                        .HasColumnName("conduct");

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<bool>("IsEvaluateWithScore")
                        .HasColumnType("boolean")
                        .HasColumnName("is_evaluate_with_score");

                    b.Property<bool?>("IsPassed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_passed");

                    b.Property<long>("MarkSubjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("mark_subject_id");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("QualitativeScore")
                        .HasColumnType("text")
                        .HasColumnName("qualitative_score");

                    b.Property<long>("SchoolYearId")
                        .HasColumnType("bigint")
                        .HasColumnName("school_year_id");

                    b.Property<decimal?>("Score")
                        .HasColumnType("numeric")
                        .HasColumnName("score");

                    b.Property<long?>("SemesterId")
                        .HasColumnType("bigint")
                        .HasColumnName("semester_id");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_id");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("subject_id");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject_name");

                    b.Property<string>("SubjectQualitativeScoreAverage")
                        .HasColumnType("text")
                        .HasColumnName("subject_qualitative_score_average");

                    b.Property<decimal?>("SubjectScoreAverage")
                        .HasColumnType("numeric")
                        .HasColumnName("subject_score_average");

                    b.ToTable((string)null);

                    b.ToView("view_student_subject_scores", (string)null);
                });

            modelBuilder.Entity("subject_service.Models.ComponentPoint", b =>
                {
                    b.HasOne("subject_service.Models.MarkSubject", "MarkSubject")
                        .WithMany("ComponentPoints")
                        .HasForeignKey("MarkSubjectId")
                        .IsRequired();

                    b.HasOne("subject_service.Models.MarkType", "MarkType")
                        .WithMany("ComponentPoints")
                        .HasForeignKey("MarkTypeId")
                        .IsRequired();

                    b.Navigation("MarkSubject");

                    b.Navigation("MarkType");
                });

            modelBuilder.Entity("subject_service.Models.MarkSubject", b =>
                {
                    b.HasOne("subject_service.Models.Mark", "Mark")
                        .WithMany("SubjectMarks")
                        .HasForeignKey("MarkId")
                        .IsRequired();

                    b.HasOne("subject_service.Models.Subject", "Subject")
                        .WithMany("SubjectMarks")
                        .HasForeignKey("SubjectId")
                        .IsRequired();

                    b.Navigation("Mark");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("subject_service.Models.MarkType", b =>
                {
                    b.HasOne("subject_service.Models.Subject", "Subject")
                        .WithMany("MarkTypes")
                        .HasForeignKey("SubjectId")
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("subject_service.Models.SubjectClass", b =>
                {
                    b.HasOne("subject_service.Models.Subject", "Subject")
                        .WithMany("SubjectClasses")
                        .HasForeignKey("SubjectId")
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("subject_service.Models.TeacherSubjectClass", b =>
                {
                    b.HasOne("subject_service.Models.Subject", "Subject")
                        .WithMany("TeacherSubjectClasses")
                        .HasForeignKey("SubjectId")
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("subject_service.Models.Mark", b =>
                {
                    b.Navigation("SubjectMarks");
                });

            modelBuilder.Entity("subject_service.Models.MarkSubject", b =>
                {
                    b.Navigation("ComponentPoints");
                });

            modelBuilder.Entity("subject_service.Models.MarkType", b =>
                {
                    b.Navigation("ComponentPoints");
                });

            modelBuilder.Entity("subject_service.Models.Subject", b =>
                {
                    b.Navigation("MarkTypes");

                    b.Navigation("SubjectClasses");

                    b.Navigation("SubjectMarks");

                    b.Navigation("TeacherSubjectClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
